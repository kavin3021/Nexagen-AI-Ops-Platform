name: NexaGen AI Ops Platform - CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deployment mode'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - full
      destroy_after:
        description: 'Destroy infrastructure after demo (minutes)'
        required: false
        default: '30'

env:
  PROJECT_NAME: nexagen
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pylint bandit safety

      - name: Code formatting check
        run: |
          black --check --diff llm-applications/ multimodal/ scripts/
          isort --check-only --diff llm-applications/ multimodal/ scripts/

      - name: Linting
        run: |
          flake8 llm-applications/ multimodal/ scripts/ --max-line-length=100 --ignore=E203,W503
          pylint llm-applications/ multimodal/ scripts/ --exit-zero

      - name: Type checking
        run: |
          mypy llm-applications/ multimodal/ --ignore-missing-imports --no-strict-optional

      - name: Security scan
        run: |
          bandit -r llm-applications/ multimodal/ scripts/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          ENVIRONMENT: test

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ -v
        env:
          ENVIRONMENT: test

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            htmlcov/
            .coverage

  # Infrastructure Validation
  infrastructure-validation:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive terraform/

      - name: Validate Azure Infrastructure
        run: |
          cd terraform/azure
          terraform init -backend=false
          terraform validate

      - name: Validate GCP Infrastructure
        run: |
          cd terraform/gcp
          terraform init -backend=false
          terraform validate

      - name: Security scan Terraform
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: |
          docker build -f Dockerfile.api -t nexagen-api:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run --rm -d --name nexagen-test -p 8000:8000 nexagen-api:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop nexagen-test

      - name: Build and test monitoring image
        run: |
          docker build -f Dockerfile.monitoring -t nexagen-monitoring:${{ github.sha }} .

  # Deploy to Demo Environment
  deploy-demo:
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, docker-build]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: demo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set deployment mode
        run: |
          if [ "${{ github.event.inputs.deploy_mode }}" = "full" ]; then
            echo "DEMO_MODE=false" >> $GITHUB_ENV
          else
            echo "DEMO_MODE=true" >> $GITHUB_ENV
          fi

      - name: Deploy Azure Infrastructure
        run: |
          cd terraform/azure
          terraform init
          terraform plan -var="demo_mode=${{ env.DEMO_MODE }}" -var="alert_email=${{ secrets.ALERT_EMAIL }}"
          terraform apply -auto-approve -var="demo_mode=${{ env.DEMO_MODE }}" -var="alert_email=${{ secrets.ALERT_EMAIL }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Get Azure outputs
        run: |
          cd terraform/azure
          echo "AZURE_OPENAI_ENDPOINT=$(terraform output -raw openai_endpoint)" >> $GITHUB_ENV
          echo "AZURE_SEARCH_ENDPOINT=$(terraform output -raw search_endpoint)" >> $GITHUB_ENV
          echo "AZURE_CV_ENDPOINT=$(terraform output -raw cv_endpoint)" >> $GITHUB_ENV

      - name: Deploy GCP Infrastructure
        run: |
          cd terraform/gcp
          terraform init
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="demo_mode=${{ env.DEMO_MODE }}" -var="alert_email=${{ secrets.ALERT_EMAIL }}"
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="demo_mode=${{ env.DEMO_MODE }}" -var="alert_email=${{ secrets.ALERT_EMAIL }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY_FILE }}

      - name: Deploy API to Cloud Run
        if: env.DEMO_MODE == 'true'
        run: |
          gcloud run deploy nexagen-api \
            --source . \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars AZURE_OPENAI_ENDPOINT=${{ env.AZURE_OPENAI_ENDPOINT }},AZURE_SEARCH_ENDPOINT=${{ env.AZURE_SEARCH_ENDPOINT }},GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}

      - name: Run Health Checks
        run: |
          python scripts/deployment/health_check.py
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Demo Tests
        run: |
          python -m pytest tests/demo/ -v
        env:
          DEMO_MODE: ${{ env.DEMO_MODE }}

      - name: Generate Demo Report
        run: |
          python scripts/utilities/demo_report.py > demo-report.md
        env:
          GITHUB_SHA: ${{ github.sha }}
          DEPLOYMENT_TIME: ${{ steps.deploy.outputs.time }}

      - name: Upload Demo Report
        uses: actions/upload-artifact@v3
        with:
          name: demo-report
          path: demo-report.md

      - name: Setup Auto-Destroy Timer
        if: github.event.inputs.destroy_after != '' && env.DEMO_MODE == 'true'
        run: |
          echo "Will destroy infrastructure in ${{ github.event.inputs.destroy_after }} minutes"
          sleep $((${{ github.event.inputs.destroy_after }} * 60))
          make destroy-all
        continue-on-error: true

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-demo
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install locust requests

      - name: Run load tests
        run: |
          locust -f tests/performance/load_test.py --headless --users 10 --spawn-rate 2 --run-time 5m --host ${{ env.API_ENDPOINT }}
        env:
          API_ENDPOINT: ${{ needs.deploy-demo.outputs.api_endpoint }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            *.html
            *.csv

  # Security Testing
  security-tests:
    runs-on: ubuntu-latest
    needs: deploy-demo
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ needs.deploy-demo.outputs.api_endpoint }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-demo, performance-tests, security-tests]
    if: always() && (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_mode == 'demo')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Destroy GCP Infrastructure
        run: |
          cd terraform/gcp
          terraform init
          terraform destroy -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="demo_mode=true"
        continue-on-error: true
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY_FILE }}

      - name: Destroy Azure Infrastructure
        run: |
          cd terraform/azure
          terraform init
          terraform destroy -auto-approve -var="demo_mode=true"
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Final Cost Report
        run: |
          python scripts/utilities/cost_calculator.py --final-report
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [cleanup]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.cleanup.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 NexaGen AI Ops Platform Demo Completed Successfully!
            
            ✅ Infrastructure deployed and tested
            ✅ Performance tests passed
            ✅ Security scans completed
            ✅ Resources cleaned up
            
            Total cost: Check artifacts for detailed report
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ NexaGen AI Ops Platform Demo Failed
            
            Please check the GitHub Actions logs for details.
            Don't forget to manually clean up resources if needed.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}